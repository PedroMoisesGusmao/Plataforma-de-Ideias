const mongoose = require('mongoose');

// Importa todos os models para garantir que os √≠ndices sejam criados
const User = require('../models/User');
const Idea = require('../models/Idea');
const Vote = require('../models/Vote');

/**
 * Configura todos os √≠ndices necess√°rios para otimiza√ß√£o de performance
 * Este arquivo deve ser executado ap√≥s a conex√£o com o banco
 */
async function createIndexes() {
  try {
    console.log('üîß Criando √≠ndices do banco de dados...');

    // √çndices para User
    await User.createIndexes();
    console.log('‚úÖ √çndices do User criados (email √∫nico)');

    // √çndices para Idea
    await Idea.createIndexes();
    console.log('‚úÖ √çndices da Idea criados (authorId, category, status, timestamps)');

    // √çndices para Vote (o mais importante - √≠ndice √∫nico composto)
    await Vote.createIndexes();
    console.log('‚úÖ √çndices do Vote criados (userId + ideaId √∫nico composto)');

    // √çndices adicionais para performance
    await createAdditionalIndexes();
    
    console.log('üéâ Todos os √≠ndices foram criados com sucesso!');
    
  } catch (error) {
    console.error('‚ùå Erro ao criar √≠ndices:', error);
    throw error;
  }
}

/**
 * Cria √≠ndices adicionais para otimiza√ß√£o de queries espec√≠ficas
 */
async function createAdditionalIndexes() {
  try {
    // √çndice composto para buscar ideias por categoria e data
    await Idea.collection.createIndex(
      { category: 1, createdAt: -1 },
      { name: 'category_createdAt_idx' }
    );

    // √çndice para buscar ideias por status
    await Idea.collection.createIndex(
      { status: 1, createdAt: -1 },
      { name: 'status_createdAt_idx' }
    );

    // √çndice para buscar ideias por autor e data
    await Idea.collection.createIndex(
      { authorId: 1, createdAt: -1 },
      { name: 'author_createdAt_idx' }
    );

    // √çndice para contar votos por ideia (otimiza aggregations)
    await Vote.collection.createIndex(
      { ideaId: 1, voteType: 1 },
      { name: 'idea_voteType_idx' }
    );

    // √çndice para buscar votos por usu√°rio
    await Vote.collection.createIndex(
      { userId: 1, createdAt: -1 },
      { name: 'user_vote_history_idx' }
    );

    console.log('‚úÖ √çndices adicionais de performance criados');
    
  } catch (error) {
    console.error('‚ùå Erro ao criar √≠ndices adicionais:', error);
    throw error;
  }
}

/**
 * Lista todos os √≠ndices existentes para debug
 */
async function listIndexes() {
  try {
    console.log('\nüìã √çndices existentes:');
    
    const userIndexes = await User.collection.listIndexes().toArray();
    console.log('User:', userIndexes.map(idx => idx.name));
    
    const ideaIndexes = await Idea.collection.listIndexes().toArray();
    console.log('Idea:', ideaIndexes.map(idx => idx.name));
    
    const voteIndexes = await Vote.collection.listIndexes().toArray();
    console.log('Vote:', voteIndexes.map(idx => idx.name));
    
  } catch (error) {
    console.error('‚ùå Erro ao listar √≠ndices:', error);
  }
}

/**
 * Remove todos os √≠ndices (√∫til para desenvolvimento)
 */
async function dropAllIndexes() {
  try {
    console.log('üóëÔ∏è Removendo todos os √≠ndices...');
    
    await User.collection.dropIndexes();
    await Idea.collection.dropIndexes();
    await Vote.collection.dropIndexes();
    
    console.log('‚úÖ Todos os √≠ndices foram removidos');
    
  } catch (error) {
    console.error('‚ùå Erro ao remover √≠ndices:', error);
  }
}

module.exports = {
  createIndexes,
  createAdditionalIndexes,
  listIndexes,
  dropAllIndexes
};